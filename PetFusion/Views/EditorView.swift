//
//  EditorView.swift
//  PetFusion
//
//  Created by fdsa on 1/27/24.
//

import Foundation
import SwiftUI
import PencilKit

extension UIApplication {
    func dismissKeyboard() {
        sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
    }
}

struct EditorView: View {
    // The image selected by the user to edit. Defaults to a blank white 1024x1024 image
    @State var selectedImage: EditedImage = EditedImage()
    // The generative image generated by the user, only set once the API returns
    @State var generatedImage: GenerativeImage?
    // Indicates whether the image picker should be displayed, used by the user to select an initial image
    @State private var presentImagePicker = false
    // Indicates whether we are waiting on an API response, used to display the loading animation
    @State private var isGeneratingImage = false
    // Used to dismiss EditorView programatically
    @Environment(\.presentationMode) var presentationMode

    // The main view representing the Editor View. Contains subviews for the actual editing, loading, and results
    var body: some View {
        VStack {
            Spacer()
            HStack {
                Spacer()
                Image(systemName: "chevron.down")
                    .font(.headline)
                    .foregroundColor(.secondary)
                    .padding(.top)
                Spacer()
            }
            HStack {
                Text("Editor")
                    .font(.title)
                    .fontWeight(.bold)
                    .padding([.leading, .trailing])
                Spacer()
            }
            
            if (self.generatedImage == nil && self.isGeneratingImage) {
                self.loadingView
            } else if (self.generatedImage != nil) {
                ResultView(image: self.generatedImage!)
            } else {
                self.editorView
            }
        }
        .sheet(isPresented: $presentImagePicker, content: {
            ImagePicker(sourceType: .photoLibrary, editedImage: $selectedImage)
        })
        .onAppear(perform: {
            // once the user visits the editor view, automatically show the image picker to select an image
            if (!self.selectedImage.hasSelectedImage()) {
                self.presentImagePicker = true
            }
        })
        .onTapGesture {
            UIApplication.shared.dismissKeyboard()
        }
    }
    
    // user-inputted prompt for the image
    @State private var imagePrompt: String = ""
    // number of times user entered an invalid prompt
    @State private var attempts: Int = 0
    // stroke size of the tool used to draw the mask - controlled via Slider in the UI
    @State private var strokeSize = 5.0
    // main PencilKit canvas view used to draw the mask
    var canvasView: PKCanvasView = PKCanvasView()
    // main editor view, displaying the image and tools for drawing a mask and adding a prompt
    var editorView: some View {
        VStack {
            Image(uiImage: selectedImage.image)
                .resizable()
                .scaledToFit()
                .frame(height: UIScreen.main.bounds.height * 0.45)
                .overlay {
                    ImageDrawingView(strokeSize: $strokeSize, canvasView: canvasView)
                }
            
            VStack {
                HStack {
                    Text("Adjust stroke size")
                        .bold()
                        .padding([.leading])
                    Spacer()
                }
                Slider(value: $strokeSize, in: 0.0...10.0) {
                    Text("Label")
                } minimumValueLabel: {
                    Image(systemName: "circle.fill")
                        .font(.system(size: 10))
                } maximumValueLabel: {
                    Image(systemName: "circle.fill")
                        .font(.system(size: 20))
                }
                .accentColor(Color(hex: "#7E76FA"))
                .padding([.leading, .trailing])
            }
            .padding([.top])
            
            VStack {
                HStack {
                    Text("Enter Prompt")
                        .bold()
                        .padding([.leading])
                    Spacer()
                }
                HStack {
                    TextField("A cute thing...", text: $imagePrompt, axis: .vertical)
                        .padding([.leading])
                        .frame(minHeight: 60)
                        .background(Color(UIColor.systemGroupedBackground))
                        .shadow(color: .gray, radius: 1)
                        .modifier(ShakeEffect(animatableData: CGFloat(attempts)))
                }
            }
            
            Button {
                if self.imagePrompt == "" {
                    withAnimation {
                        // shake textfield for each invalid prompt
                        // currently the only invalid prompt is empty
                        attempts += 1
                    }
                } else {
                    // otherwise, setting this will result in the loading view popping up
                    self.isGeneratingImage = true
                }
            } label: {
                HStack {
                    Image(systemName: "sparkles")
                    Text("Generate")
                }
                .padding()
                .frame(maxWidth: .greatestFiniteMagnitude)
                .foregroundColor(.white)
                .background(Color(hex: "#7E76FA"))
                .cornerRadius(10)
            }
            .padding()
        }
    }

    // indicates whether we should show an error alert
    @State var showAlert: Bool = false
    @State var error: LocalizedError?
    // indicates whether we should show the debug modal view
    @State var showDebugView: Bool = false
    // a loading screen displayed when waiting for results from the API
    var loadingView: some View {
        VStack {
            Spacer()
            LoadingCircleView()
            Spacer()
            // a button that brings up the debug modal view - should be removed later
            Button {
                self.showDebugView.toggle()
            } label: {
                Text("[Debug]")
                    .font(.footnote)
                    .padding()
            }
            .sheet(isPresented: $showDebugView) {
                EditorDebugView(selectedImage: self.selectedImage)
            }
        }
        .onAppear(perform: {
            Task {
                // update the edited image struct with the prompt
                self.selectedImage.updatePrompt(prompt: self.imagePrompt)
                // update the edited image struct with the mask
                var canvasImage: UIImage = DEFAULT_EMPTY_IMAGE
                DispatchQueue.main.sync {
                    // grab the mask, edit the background to be white
                    // then, invert colors so that the drawn areas are white
                    canvasImage = UIImage.imageWithWhiteBackground(from: self.canvasView).invertColors()!.scalePreservingAspectRatio(targetSize: self.selectedImage.image.size)
                }
                self.selectedImage.updateMask(maskImage: canvasImage)
                
                // grab results from the Diffusion API
                var image: UIImage
                do {
                    image = try await DiffusionAPI().img2img(
                        prompt: self.imagePrompt,
                        promptimage: self.selectedImage.image,
                        promptmask: self.selectedImage.maskImage
                    )
                } catch {
                    if let error = error as? LocalizedError {
                        self.error = error
                    }
                    self.showAlert = true
                    return
                }
                
                // convert UIImage back to NSData (NSData is natively compatible with SwiftData)
                // we go from UIImage -> NSData instead of just NSData to verify that we actually have a valid image
                guard let imageData = image.jpegData(compressionQuality: 1.0) else {
                    self.isGeneratingImage = false
                    return
                }
                
                // create and save the generated image to SwiftData
                let generativeImage = GenerativeImage(
                    id: UUID(),
                    prompt: self.imagePrompt,
                    imageData: imageData
                )
                DispatchQueue.main.async {
                    PetFusionApp.sharedModelContainer.mainContext.insert(generativeImage)
                }
                
                // set flags necessary to bring up the result view
                self.generatedImage = generativeImage
                self.isGeneratingImage = false
            }
        })
        .alert(isPresented: $showAlert, content: {
            Alert(
                title: Text("Failed to generate image, please try again"),
                message: Text("\(self.error?.failureReason ?? "Unknown Reason")"),
                dismissButton: .default(Text("Dismiss"), action: {
                    // if there is an error, exit the editor modal view when the user dismisses the alert
                    self.presentationMode.wrappedValue.dismiss()
                })
            )
        })
    }
}

#Preview {
    EditorView(selectedImage: EditedImage(
        image: UIImage(named: "testimg1")!
    ))
}
